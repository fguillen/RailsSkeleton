FROM ruby:3.2.4-alpine3.19

# Install dependencies
RUN apk update
RUN apk upgrade
RUN apk --no-cache add \
  build-base \
  libstdc++ \
  openssl-dev \
  git \
  mariadb-dev \
  nodejs \
  bash

# Set an environment variable where the Rails app is installed to inside of Docker image:
ENV RAILS_ROOT /var/www/app
RUN mkdir -p $RAILS_ROOT

# Set working directory, where the commands will be ran:
WORKDIR $RAILS_ROOT

# Setting env up
ENV RAILS_ENV="production"
ENV RACK_ENV="production"

# Basic folders (required by puma)
RUN mkdir -p tmp/pids
RUN mkdir -p tmp/sockets

# Adding gemsassets/config/manifest.js:2
COPY Gemfile Gemfile
COPY Gemfile.lock Gemfile.lock

RUN bundle install --jobs 2 --retry 5 --without development test

# Adding project files
COPY . .
RUN bundle exec rails assets:precompile

## Cron config

# In alpine we have a cron file per user. We have to reuse the actual
#  one and add our crons
COPY crontab /tmp
RUN cat /tmp/crontab >> /etc/crontabs/root && rm /tmp/crontab

# To load the env variables in cron sessions
# without this the user in the cron session won't be able to find commands and Gems
RUN printenv | grep -v "no_proxy" >> /etc/environment

# Run the command on container startup
CMD ["crond", "-f"]
